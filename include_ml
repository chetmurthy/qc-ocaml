(* Copyright 2019 Chetan Murthy, All rights reserved. *)
(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)

#use "topfind";;

#require "containers";;
#require "pcre";;
#require "oUnit";;
#require "oUnit.advanced";;
#require "ocamlgraph" ;;
#require "dot" ;;
#require "netstring" ;;
#require "netzip" ;;
#require "netclient" ;;
#require "netclient,nettls-gnutls" ;;
#require "sexplib";;
#require "yojson" ;;
#require "ppx_deriving_yojson" ;;
#require "inifiles" ;;

#load "misc_functions.cmo";;
#load "gmap.cmo";;
#load "gset.cmo";;
#load "coll.cmo";;
#load "qasmsyntax.cmo";;
#load "qasmlex.cmo";;
#load "qasmparser.cmo";;
#load "qasmpp.cmo";;
#load "qasmdag0.cmo";;
#load "qasm_passes.cmo";;
#load "qc_layout.cmo";;
#load "qc_environment.cmo";;
#load "qrpc_types.cmo";;
#load "qc_emitjson.cmo";;
#load "qrpc_api.cmo";;
#load "qc_tests.cmo";;

#print_length 1048576 ;;

open Misc_functions ;;
open Qasmsyntax ;;
open Qasmlex ;;
open Qasmparser ;;
open Qasmpp ;;
open Qasmdag0 ;;
open Qasm_passes ;;
open Qc_layout ;;
open Qrpc_types ;;
open Qrpc_api ;;

(*
#trace header ;;
#trace grab_real ;;
#trace eat_header_suffix ;;
#trace body_token ;;
#trace token ;;
#trace grab_include ;;
#trace eat_include_suffix_1 ;;
#trace cleanws ;;

#trace TS.choose ;;
#trace TS.Q.choose ;;
#trace Node.compare ;;#trace Node.compare ;;
#trace DAG.compare ;;
 *)

(*

let pl = body_parse PA.program {| qreg q[2] ; CX q[0], q[1] ; qreg r[2] ; CX r[0], r[1] ; |} in
let (envs, pl) = TYCHK.program pl in
    let (dag, _) = DAG.make envs pl in
print_string (pp DAG.pp_dag dag) ;
print_newline () ;
let pl = DAG.to_ast envs dag in
print_string (pp ASTPP.program pl) ;
DAG.tsort dag
;;

let pl = body_parse PA.program {| qreg r[2] ; CX r[0], r[1] ; qreg q[2] ; CX q[0], q[1] ; |} in
let (envs, pl) = TYCHK.program pl in
    let (dag, _) = DAG.make envs pl in
print_string (pp DAG.pp_dag dag) ;
print_newline () ;
let pl = DAG.to_ast envs dag in
print_string (pp ASTPP.program pl) ;
DAG.tsort dag
;;

let accounts = Credentials.mk() ;;
Credentials.add_rcfile accounts ;;
let session = Session.mk ~key:"ibmq" accounts ;;
Session.obtain_token session ;;
Session.available_backends session ;;

 *)

