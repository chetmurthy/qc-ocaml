[[install]]
= Install
:toc:
:toc-placement!:

Installing Prerequisites and building QC-Ocaml

toc::[]

== Installing Ocaml

We use `opam` to set up the ocaml environment.  Currently we're based
on ocaml version 4.07.1.

How to set up your environment for this tool:

for Ubuntu:
....
[optional] sudo add-apt-repository ppa:avsm/ppa
[optional] sudo apt update
sudo apt-get install opam
....

for OSX:
....
[optional] brew install gtk+3
[optional] brew install gpatch
brew install opam
....

for Ubuntu or OSX:
....
export VERSION=4.07.1

export OPAMROOT=$HOME/Hack/Ocaml/$VERSION

mkdir -p $OPAMROOT

echo "export OPAMROOT=$OPAMROOT" >> $OPAMROOT/dot.bashrc

opam init --dot-profile=$OPAMROOT/dot.bashrc \
    -j 32 \
    --yes \
    --bare \
    --inplace-build \
    --enable-completion \
    --enable-shell-hook \
    --shell-setup

eval $(opam env)

....

And to set up the environment in a shell for each of these installs,
just source the dot.bashrc in $OPAMROOT/dot.bashrc

== Installing Prerequisite Modules

We need a bumch of prerequisite modules.

(0) OPTIONAL (for components/setup that _might_ be missing on a bare bones OS, like an AWS basic Ubuntu instance)

....
[optional] sudo apt install gcc
[optional] sudo apt install make
[optional] sudo apt install m4
[optional] sudo apt install pkg-config
[optional] sudo apt install libcairo2-dev 
[optional] sudo apt install libexpat1-dev 
[optional] sudo apt install libgtk-3-dev
[optional] sudo apt install camlp5
[optional] sudo apt install libcurl4-gnutls-dev
[optional] sudo apt install libgnutls28-dev
[optional] sudo apt install libssl-dev
[optional] sudo apt install nettle-dev
[optional] opam switch create ocaml-base-compiler.$VERSION
....

(1) opam installs

....
opam install lablgtk3 ocamlfind camlp5 \
         camlp5 camlzip cmdliner conf-gnutls \
         menhir oasis containers sexplib \
	 ocamlfind ocamlgraph ocamlnet ocurl ounit ppx_test \
	 pcre ssl ppx_deriving_yojson yojson ocaml-inifiles \
	 ppx_deriving_cmdliner rresult uuidm ppx_sexp_conv \
	 ocamldot camlp-streams
....

== Building QC-Ocaml

....
git clone https://github.com/chetmurthy/qc-ocaml.git
make everything
....

This will build a tool, `qctool` which allows to run commands against
the backend, as well as a library, `libqasm.cma` which contains the
library itself.  `make test` will run test-cases, and the file
`include_ml` contains commands that can be cut-and-paste-ed into the
ocaml toplevel.

