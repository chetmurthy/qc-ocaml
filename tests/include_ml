(* Copyright 2019 Chetan Murthy, All rights reserved. *)

#use "topfind";;

#require "camlp5";;
#require "pa_ppx.testutils";;
#require"pa_ppx.runtime_fat" ;;
#require "qc_ocaml";;
#require "oUnit";;
#print_length 1048576 ;;

open Asttools ;;
open Pa_ppx_utils ;;
open Coll ;;
open Std ;;
open Misc_functions ;;
open Qc_misc ;;
open Qasm2syntax ;;
open Qasm2_lexer ;;
open Qasm2_parser ;;
open Qasmpp ;;
open Qasmdag0 ;;
open Qasm_io ;;
open Qasm_passes ;;
open Qc_layout ;;
open Qc_symbolic ;;
open Qobj_types ;;
open Qobj_compile ;;
open Qrpc_types ;;
open Qrpc_api ;;
open OUnit2 ;;

Pa_ppx_base.Pp_MLast.Ploc.pp_loc_verbose := true ;;
Pa_ppx_runtime_fat.Exceptions.Ploc.pp_loc_verbose := true ;;

#install_printer Fpath.pp ;;

let lexbuf_contents lb =
  let open Lexing in
  let pos = lb.lex_curr_pos in
  let len = lb.lex_buffer_len - lb.lex_curr_pos in
  (Bytes.to_string (Bytes.sub lb.lex_buffer pos len))
;;

let pp_lexbuf lb =
  Format.print_string "#<lexbuf:<";
  Format.print_string (lexbuf_contents lb);
  Format.print_string ">>"
;;
#install_printer pp_lexbuf ;;

let pp_tokenaux (t : Qc_misc.TokenAux.t) = Fmt.(pf stdout "<tokenaux>") ;;
#install_printer pp_tokenaux ;;

(*
#trace QGate.Latex.latex ;;
#trace QGate.Latex.do_multiqubit ;;
let ast = Top.(full_parse_from_file parse1) "testdata/qasm0/test15.qasm";;
let qc = Circuit.mk ast ;;
!(ast.Ast.gates)
|> List.iter (Circuit.add_op qc) ;;
List.iter print_string (Circuit.format_sequence qc) ;;
List.iter print_string (Circuit.format_matrix qc) ;;
List.iter print_string (Circuit.format_latex qc) ;;

List.iter print_string Top.(full_parse_from_file document "testdata/qasm0/test15.qasm");;
 *)
(*
#trace header ;;
#trace grab_real ;;
#trace eat_header_suffix ;;
#trace body_token ;;
#trace token ;;
#trace grab_include ;;
#trace eat_include_suffix_1 ;;
#trace cleanws ;;

#trace TS.choose ;;
#trace TS.Q.choose ;;
#trace Node.compare ;;#trace Node.compare ;;
#trace DAG.compare ;;
 *)

(*

let pl = body_parse PA.program {| qreg q[2] ; CX q[0], q[1] ; qreg r[2] ; CX r[0], r[1] ; |} in
let (envs, pl) = TYCHK.program pl in
    let (dag, _) = DAG.make envs pl in
print_string (pp DAG.pp_dag dag) ;
print_newline () ;
let pl = DAG.to_ast envs dag in
print_string (pp ASTPP.program pl) ;
DAG.tsort dag
;;

let pl = body_parse PA.program {| qreg r[2] ; CX r[0], r[1] ; qreg q[2] ; CX q[0], q[1] ; |} in
let (envs, pl) = TYCHK.program pl in
    let (dag, _) = DAG.make envs pl in
print_string (pp DAG.pp_dag dag) ;
print_newline () ;
let pl = DAG.to_ast envs dag in
print_string (pp ASTPP.program pl) ;
DAG.tsort dag
;;
 *)
(*
let creds = Credentials.mk() ;;
Credentials.add_rcfile creds ;;
let session = Session.mk creds ;;
Session.setup session ;;
 *)
(*
Session.available_backends session ;;

        let (envs, dag) = full_to_dag0_from_file ~path:["testdata"] "testdata/qobj/bell0.qasm" ;;
        let circuit = Compile.circuit_to_experiment  ~name:"circuit0" envs dag ;;
        let (qobj: Qobj_types.Qobj.t) = Compile.circuits_to_qobj ~backend_name:"ibmq_16_melbourne"
                     ~shots:1024 ~max_credits:10 ~qobj_id:"168a65c1-f83b-4346-8643-6aa9eea59234"
                     ~memory:false ["circuit0",envs, dag] ;;

Job.submit_job "ibmq_16_melbourne" qobj session ;;

 *)

open Qlam_syntax ;;
open Qlam_ops ;;
open Qlam_parser ;;
open Qlam_env ;;
open Qc_latex ;;

let id_pp x = Fmt.(pf stdout "<:id<%a>>" ID.pp_hum x) ;;
#install_printer id_pp ;;

let qvar_pp x = Fmt.(pf stdout "<:qvar<%a>>" SYN.QV.pp_hum x) ;;
#install_printer qvar_pp ;;

let cvar_pp x = Fmt.(pf stdout "<:cvar<%a>>" SYN.CV.pp_hum x) ;;
#install_printer cvar_pp ;;

let bi_pp x = Fmt.(pf stdout "<:bi< %a >>" SYN.BI.pp_hum x) ;;
#install_printer bi_pp ;;

let qgn_pp x = Fmt.(pf stdout "<:qgn<%a>>" SYN.QG.pp_hum x) ;;
(*
#install_printer qgn_pp ;;
 *)
let qcircuit_pp qc = Fmt.(pf stdout "<:circuit< %a >>" PP.qcirc qc) ;;
#install_printer qcircuit_pp ;;

let gate_item_pp gi = Fmt.(pf stdout "<:gate_item< %a >>" PP.gate_item gi) ;;
(*
#install_printer gate_item_pp ;;
 *)
let item_pp gi = Fmt.(pf stdout "<:item< %a >>" PP.item gi) ;;
#install_printer item_pp ;;

let read_file_tolam s0 =
  let (env,instrs) = with_include_path ~path:["testdata"] full_to_ast_from_file s0 in
  (env, instrs) |>  Qconvert.ToLam.program
;;

let pp_qvfvs x = Fmt.(pf stdout "<:qvfvs<%a>>" SYN.QVFVS.pp_hum x) ;;
let pp_cvfvs x = Fmt.(pf stdout "<:cvfvs<%a>>" SYN.CVFVS.pp_hum x) ;;

let pp_qv_corr l = Fmt.(pf stdout "<:qvcorr<%a>>" (list ~sep:(const string "; ") (parens (pair ~sep:(const string ", ") SYN.QV.pp_hum SYN.QV.pp_hum))) (SYN.QVMap.bindings l)) ;;
let pp_cv_corr l = Fmt.(pf stdout "<:cvcorr<%a>>" (list ~sep:(const string "; ") (parens (pair ~sep:(const string ", ") SYN.CV.pp_hum SYN.CV.pp_hum))) (SYN.CVMap.bindings l)) ;;

#install_printer pp_qvfvs ;;
#install_printer pp_cvfvs ;;
#install_printer pp_qv_corr ;;
#install_printer pp_cv_corr ;;

#load "qasm2_tests.cmo";;
#load "qasm0_tests.cmo";;
open Qasm2_tests ;;


#load "qlam_tests.cmo";;
open Qlam_tests ;;

let [@warning "-8"] ([], qc) = {| let q = qubit() in let q = tg q in (q) |} |> qcircuit_from_string ;;
let e = {|
gate tg () x = let q = h x in (q) ;
|} |> qelib_from_string ;;
#trace BetaReduce.qcircuit ;;
let (genv0, (envitems, qc1)) = Standard.program ~env0:(env0@env1) (e, qc) ;;
Fmt.(pf stdout "%a" Qasmpp.ASTPP.program (Qconvert.ToQasm2.program genv0 ~env0:(env0@env1) (envitems, qc1)));;

let [@warning "-8"] ([], qc') = {|
let q0 = qubit() in
let q0 = h q0 in
let q1 = qubit() in
let q1 = h q1 in
let (q0, q1) = cx q0 q1 in
let q0 = h q0 in
let q1 = h q1 in
(q0, q1)
|} |> qcircuit_from_string ;;


module TYCHK = Ops.TYCHK ;;
let ge0 = TYCHK.environ env0 ;;
let cm0 = GEnv.(find_mach ge0 (ID.mk"ibm_qx5"));;
module Ops = Qlam_ops ;;
let cm = Ops.CM.mk cm0 ;;
Ops.CM.(cm |> dot |> dot_to_file "goo.dot");;

let g_to_list g = Ops.CM.(DAG.fold_edges_e (fun e acc -> e::acc) g []) ;;

let p1 = with_include_path ~path:["testdata"] full_to_ast_from_file "testdata/example.qasm" in
let p2 = p1 |>  Qconvert.ToLam.program in
let (genv0,_) = TYCHK.program (env0@(fst p2), snd p2) in
Ops.AssignBits.program genv0 (env0@(fst p2), snd p2) ;;

let m = Matrix.mk 3 3 ;;
for i = 0 to 2 do
Matrix.(set m i 1 (ME.LSTICK (Some Fmt.(str "q_%d" i)))) ;
Matrix.(set m i 0 (ME.NGHOST Fmt.(str "q_%d" i)))
done ;;

Exec.latex (Matrix.tolatex m) ;;

let m =
  let open Qc_latex.ME in
  Matrix.ofList
    [[NGHOST "q_0"; LSTICK (Some "q_0"); QW; QW];
     [NGHOST "q_1"; LSTICK (Some "q_1"); QW; QW];
     [NGHOST "q_2"; LSTICK (Some "q_2"); QW; QW]]
;;

Exec.latex (Matrix.tolatex m) ;;

(*
qreg q[2];
creg c[2];
measure q -> c ;
 *)

let m =
  let open Qc_latex.ME in
  Matrix.ofList
[[NGHOST "q_0"; LSTICK(Some "q_0");QW;METER;QW;QW;QW];
 [NGHOST"q_1";LSTICK (Some "q_1");QW;QW;METER;QW;QW];
 [NGHOST{|\mathrm{{c} :  }|};LSTICK(Some {|\mathrm{{c} :  }|});CWIDTH 2;DSTICK("0", -2);DSTICK("1", -1);CW;CW]]
;;


Exec.latex (Matrix.tolatex m) ;;

let m =
  let open Qc_latex.ME in
  Matrix.ofList
[[NGHOST "q_0"; LSTICK(Some "q_0");QW;METER;QW;QW;QW];
 [NGHOST"q_1";LSTICK (Some "q_1");QW;QW;METER;QW;QW];
 [NGHOST{|\mathrm{{c} :  }|};LSTICK(Some {|\mathrm{{c} :  }|});CWIDTH 1;DSTICK("0", -2);CW;CW;CW];
 [NGHOST{|\mathrm{{c} :  }|};LSTICK(Some {|\mathrm{{c} :  }|});CWIDTH 1;CW;DSTICK("1", -2);CW;CW]]
;;


Exec.latex (Matrix.tolatex m) ;;

(* Local Variables: *)
(* mode: tuareg *)
(* End: *)
