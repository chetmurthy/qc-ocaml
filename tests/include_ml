(* Copyright 2019 Chetan Murthy, All rights reserved. *)

#use "topfind";;

#require "camlp5";;
#require "pa_ppx.testutils";;
#require"pa_ppx.runtime_fat" ;;
#require "qc_ocaml";;
#require "oUnit";;
#print_length 1048576 ;;

open Pa_ppx_utils ;;
open Coll ;;
open Std ;;
open Misc_functions ;;
open Qasm2syntax ;;
open Qasm2_lexer ;;
open Qasm2_parser ;;
open Qasmpp ;;
open Qasmdag0 ;;
open Qasm_io ;;
open Qasm_passes ;;
open Qc_layout ;;
open Qc_symbolic ;;
open Qobj_types ;;
open Qobj_compile ;;
open Qrpc_types ;;
open Qrpc_api ;;
open OUnit2 ;;

Pa_ppx_base.Pp_MLast.Ploc.pp_loc_verbose := true ;;
Pa_ppx_runtime_fat.Exceptions.Ploc.pp_loc_verbose := true ;;

let lexbuf_contents lb =
  let open Lexing in
  let pos = lb.lex_curr_pos in
  let len = lb.lex_buffer_len - lb.lex_curr_pos in
  (Bytes.to_string (Bytes.sub lb.lex_buffer pos len))
;;

let pp_lexbuf lb =
  Format.print_string "#<lexbuf:<";
  Format.print_string (lexbuf_contents lb);
  Format.print_string ">>"
;;
#install_printer pp_lexbuf ;;

let pp_tokenaux (t : Qc_misc.TokenAux.t) = Fmt.(pf stdout "<tokenaux>") ;;
#install_printer pp_tokenaux ;;

(*
#trace QGate.Latex.latex ;;
#trace QGate.Latex.do_multiqubit ;;
let ast = Top.(full_parse_from_file parse1) "testdata/qasm0/test15.qasm";;
let qc = Circuit.mk ast ;;
!(ast.Ast.gates)
|> List.iter (Circuit.add_op qc) ;;
List.iter print_string (Circuit.format_sequence qc) ;;
List.iter print_string (Circuit.format_matrix qc) ;;
List.iter print_string (Circuit.format_latex qc) ;;

List.iter print_string Top.(full_parse_from_file document "testdata/qasm0/test15.qasm");;
 *)
(*
#trace header ;;
#trace grab_real ;;
#trace eat_header_suffix ;;
#trace body_token ;;
#trace token ;;
#trace grab_include ;;
#trace eat_include_suffix_1 ;;
#trace cleanws ;;

#trace TS.choose ;;
#trace TS.Q.choose ;;
#trace Node.compare ;;#trace Node.compare ;;
#trace DAG.compare ;;
 *)

(*

let pl = body_parse PA.program {| qreg q[2] ; CX q[0], q[1] ; qreg r[2] ; CX r[0], r[1] ; |} in
let (envs, pl) = TYCHK.program pl in
    let (dag, _) = DAG.make envs pl in
print_string (pp DAG.pp_dag dag) ;
print_newline () ;
let pl = DAG.to_ast envs dag in
print_string (pp ASTPP.program pl) ;
DAG.tsort dag
;;

let pl = body_parse PA.program {| qreg r[2] ; CX r[0], r[1] ; qreg q[2] ; CX q[0], q[1] ; |} in
let (envs, pl) = TYCHK.program pl in
    let (dag, _) = DAG.make envs pl in
print_string (pp DAG.pp_dag dag) ;
print_newline () ;
let pl = DAG.to_ast envs dag in
print_string (pp ASTPP.program pl) ;
DAG.tsort dag
;;
 *)
(*
let creds = Credentials.mk() ;;
Credentials.add_rcfile creds ;;
let session = Session.mk creds ;;
Session.setup session ;;
 *)
(*
Session.available_backends session ;;

        let (envs, dag) = full_to_dag0_from_file ~path:["testdata"] "testdata/qobj/bell0.qasm" ;;
        let circuit = Compile.circuit_to_experiment  ~name:"circuit0" envs dag ;;
        let (qobj: Qobj_types.Qobj.t) = Compile.circuits_to_qobj ~backend_name:"ibmq_16_melbourne"
                     ~shots:1024 ~max_credits:10 ~qobj_id:"168a65c1-f83b-4346-8643-6aa9eea59234"
                     ~memory:false ["circuit0",envs, dag] ;;

Job.submit_job "ibmq_16_melbourne" qobj session ;;

 *)

#load "qasm2_tests.cmo";;
#load "qasm0_tests.cmo";;
open Qasm2_tests ;;


(*
open Qlam_syntax ;;
open Qlam_parser ;;
add_include "." ;;
add_include "testdata" ;;


open Qasm2syntax.AST ;;

let env0 = qelib_from_file "qelib0.qli" ;;

let (env,instrs) = full_to_ast_from_file ~path:["testdata"] "testdata/bell2.qasm" ;;
print_string (Misc_functions.pp (Qasmpp.ASTPP.program ~skip_qelib:true) instrs);;
let (gates, qc) = instrs |>  Qconvert.ToLam.program  ;;
(gates, qc) |> pp Fmt.stdout ;;
let instrs' = Qconvert.ToQasm2.program (env0 @ gates, qc) ;;
print_string (Misc_functions.pp (Qasmpp.ASTPP.program ~skip_qelib:true) instrs');;

(* Local Variables: *)
(* mode: tuareg *)
(* End: *)
 *)
